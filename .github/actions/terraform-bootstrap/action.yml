name: 'Terraform bootstrap'
description: 'Terraform bootstrapping including init'
inputs:
  appvia-actions-id:
    description: "The application ID for the workflow token"
    required: false
    type: string
  appvia-actions-secret:
    description: "The application secret for the workflow token"
    required: false
    type: string
  aws-account-id:
    description: "The AWS account ID to deploy to"
    type: string
  aws-read-role-name:
    description: "Overrides the default behavior, and uses a custom role name for read-only access"
    type: string
  aws-role:
    description: "The role to assume"
    type: string
  aws-web-identity-token-file:
    description: "The file to store the web identity token in"
    type: string
  aws-write-role-name:
    description: "Overrides the default behavior, and uses a custom role name for read-write access"
    type: string
  aws-region:
    description: "The AWS region to deploy to"
    type: string
  enable-private-access:
    description: Optional flag to state if terraform requires pulling private modules
    type: boolean
  environment:
    description: "The environment to deploy to"
    type: string
  organization-name:
    description: "The name of the Github organization"
    type: string
  terraform-dir:
    description: "The directory to validate"
    type: string
  terraform-init-extra-args:
    description: "Extra arguments to pass to terraform init"
    type: string
  terraform-state-key:
    description: "The key of the terraform state (default: <repo-name>.tfstate)"
    type: string
  terraform-version:
    description: "The version of terraform to use"
    type: string
  use-env-as-suffix:
    description: "Whether to use the environment as a suffix for the state file and iam roles"
    type: boolean
outputs:
  outcome-auth:
    description: "Outcome of the auth step"
    value: ${{ steps.auth.outcome }}
  outcome-init:
    description: "Outcome of the init step"
    value: ${{ steps.init.outcome }}

runs:
  using: "composite"
  steps:
    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: 16
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}
    - name: Retrieve Web Identity Token for AWS Authentication
      shell: bash
      run: |
        curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=sts.amazonaws.com" | jq -r '.value' > "${{ inputs.aws-web-identity-token-file }}"
    - name: Determine AWS Role
      id: role
      shell: bash
      run: |
        role_suffix=""
        aws_read_role_name="${{ inputs.aws-read-role-name }}"
        aws_write_role_name="${{ inputs.aws-write-role-name }}"
        if [ "${{ inputs.use-env-as-suffix }}" == "true" ]; then
          role_suffix="-${{ inputs.environment }}"
        fi
        if [[ "${GITHUB_REF##*/}" == "main" ]]; then
          echo "name=${aws_write_role_name:-${{ inputs.aws-role }}${role_suffix}}" >> "${GITHUB_OUTPUT}"
        else
          echo "name=${aws_read_role_name:-${{ inputs.aws-role }}${role_suffix}-ro}" >> "${GITHUB_OUTPUT}"
        fi
    - name: Authenticate with AWS
      id: auth
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-session-name: ${{ github.event.repository.name }}
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/${{ steps.role.outputs.name }}
        mask-aws-account-id: "no"
    - name: Set terraform-state-key variable
      id: state-key
      shell: bash
      run: |
        if [ -n "${{ inputs.terraform-state-key }}" ]; then
          echo "name=${{ inputs.terraform-state-key }}" >> "${GITHUB_OUTPUT}"
        else
          if [ "${{ inputs.use-env-as-suffix }}" == "true" ]; then
            echo "name=${{ github.event.repository.name }}-${{ inputs.environment }}.tfstate" >> "${GITHUB_OUTPUT}"
          else
            echo "name=${{ github.event.repository.name }}.tfstate" >> "${GITHUB_OUTPUT}"
          fi
        fi
    - name: Enable Private Modules
      id: get_workflow_token
      if: inputs.enable-private-access == true
      uses: peter-murray/workflow-application-token-action@v4
      with:
        application_id: ${{ inputs.appvia-actions-id }}
        application_private_key: ${{ inputs.appvia-actions-secret }}
        organization: ${{ inputs.organization-name }}
        revoke_token: true
    - name: Setup Credentials
      if: inputs.enable-private-access == true
      shell: bash
      run: |
        git config --global url."https://x-access-token:${{steps.get_workflow_token.outputs.token}}@github.com/".insteadOf "https://github.com/"
    - name: Terraform init
      id: init
      shell: bash
      run: |
        terraform -chdir=${{ inputs.terraform-dir }} init \
          -backend-config="bucket=${{ inputs.aws-account-id }}-${{ inputs.aws-region }}-tfstate" \
          -backend-config="key=${{ steps.state-key.outputs.name }}" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true" \
          -backend-config="region=${{ inputs.aws-region }}" ${{ inputs.terraform-init-extra-args }}
