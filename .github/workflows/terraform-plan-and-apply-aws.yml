---
name: Terraform Validate, Plan & Apply
on:
  workflow_call:
    secrets:
      infracost-api-key:
        description: "The API key for infracost"
        required: false
      appvia-actions-id:
        description: "Appvia App ID for GH"
        required: false
      appvia-actions-secret:
        description: "Appvia App secret for GH"
        required: false
      gh-provider-app-id:
        description: "GitHub provider app ID"
        required: false
      gh-provider-installation-id:
        description: "GitHub provider installation ID"
        required: false
      gh-provider-private-key:
        description: "Base64 encoded private key for GitHub provider app"
        required: false

    inputs:
      additional-dir:
        description: Uploads additional directory as an artifact from plan stage
        required: false
        type: string

      additional-dir-optional:
        default: false
        description: Uploads additional directory as an artifact from plan stage
        required: false
        type: boolean

      aws-account-id:
        description: "The AWS account ID to deploy to"
        required: true
        type: string

      aws-role:
        default: "${{ github.event.repository.name }}"
        description: "The AWS role to assume"
        required: false
        type: string

      aws-read-role-name:
        description: "Overrides the default behavior, and uses a custom role name for read-only access"
        required: false
        type: string

      aws-write-role-name:
        description: "Overrides the default behavior, and uses a custom role name for read-write access"
        required: false
        type: string

      aws-region:
        default: "eu-west-2"
        description: "The AWS region to deploy to"
        required: false
        type: string

      cicd-repository:
        default: "appvia/appvia-cicd-workflows"
        description: "The repository to pull the CI/CD workflows from"
        required: false
        type: string

      cicd-branch:
        default: "main"
        description: "The branch to pull the CI/CD workflows from"
        required: false
        type: string

      enable-infracost:
        default: false
        description: "Whether to run infracost on the Terraform Plan (secrets.infracost-api-key must be set if enabled)"
        required: false
        type: boolean

      enable-checkov:
        default: true
        description: "Whether to run checkov security scanning"
        required: false
        type: boolean

      enable-commitlint:
        default: true
        description: "Whether to run commitlint on the commit message"
        required: false
        type: boolean

      enable-terraform-apply:
        default: true
        description: "Whether to run terraform apply on merge to main"
        required: false
        type: boolean

      enable-private-access:
        description: Optional flag to state if terraform requires pulling private modules
        required: false
        default: false
        type: boolean

      organization-name:
        description: "The name of the Github organization"
        required: false
        type: string
        default: "appvia"

      environment:
        default: "production"
        description: "The environment to deploy to"
        required: false
        type: string

      runs-on:
        default: "ubuntu-latest"
        description: "Single label value for the GitHub runner to use (custom value only applies to Terraform Plan and Apply steps)"
        required: false
        type: string

      terraform-apply-extra-args:
        default: ""
        description: "Extra arguments to pass to terraform apply"
        required: false
        type: string

      terraform-dir:
        default: "."
        description: "The directory to validate"
        required: false
        type: string

      terraform-init-extra-args:
        default: ""
        description: "Extra arguments to pass to terraform init"
        required: false
        type: string

      terraform-lock-timeout:
        default: "30s"
        description: The time to wait for a lock
        required: false
        type: string

      terraform-log-level:
        default: ""
        description: "The log level of terraform"
        required: false
        type: string

      terraform-plan-extra-args:
        default: ""
        description: "Extra arguments to pass to terraform plan"
        required: false
        type: string

      terraform-state-key:
        default: ""
        description: "The key of the terraform state (default: <repo-name>.tfstate)"
        required: false
        type: string

      terraform-values-file:
        default: ""
        description: "The values file to use (default: <environment>.tfvars)"
        required: false
        type: string

      terraform-parallelism:
        default: 20
        description: "The number of parallel operations to run"
        required: false
        type: number

      terraform-version:
        default: "1.11.2"
        description: "The version of terraform to use"
        required: false
        type: string

      trivy-version:
        default: "v0.60.0"
        description: "The version of trivy to use"
        required: false
        type: string

      working-directory:
        default: "."
        description: "The working directory to run terraform commands in"
        required: false
        type: string

      use-env-as-suffix:
        default: false
        description: "Whether to use the environment as a suffix for the state file and iam roles"
        required: false
        type: boolean

env:
  AWS_ROLE: ${{ inputs.aws-role }}
  AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/web_identity_token_file

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  debug-mode:
    name: "Debug Mode"
    runs-on: ubuntu-latest
    outputs:
      tf_log: ${{ steps.debug.outputs.tf_log }}
    steps:
      - name: Debug Mode Vars
        id: debug
        run: |
          if "${{ runner.debug == true }}"; then
            if [ "${{ inputs.terraform-log-level }}" == "TRACE" ]; then
              echo "tf_log=TRACE" >> $GITHUB_ENV
            else
              echo "tf_log=DEBUG" >> $GITHUB_OUTPUT
            fi
          else
            echo "tf_log=${{ inputs.terraform-log-level }}" >> $GITHUB_OUTPUT
          fi

  commitlint:
    name: "Commitlint"
    if: github.event_name == 'pull_request' && inputs.enable-commitlint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.commitlint.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 16
      - name: Install Dependencies
        run: npm install @commitlint/config-conventional @commitlint/cli
      - name: Retrieve Commit Configuration
        run: |
          wget https://raw.githubusercontent.com/${{ inputs.cicd-repository }}/${{ inputs.cicd-branch }}/config/commitlint.config.js -O commitlint.config.js
      - name: Run Commitlint
        id: commitlint
        run: npx commitlint --config commitlint.config.js --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }}

  terraform-format:
    name: "Terraform Format"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.format.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Format
        id: format
        uses: dflook/terraform-fmt-check@v1

  terraform-lint:
    name: "Terraform Lint"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.lint.outcome }}
      result_centralised_lint: ${{ steps.lintCentralised.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Terraform Bootstrap
        id: bootstrap
        uses: appvia/appvia-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
      - name: Setup Linter
        uses: terraform-linters/setup-tflint@v4
      - name: Linter Initialize
        run: tflint --init
      - name: Linting Code
        id: lint
        run: tflint -f compact
      - name: Retrieve Centralised Lint Configuration
        run: |
          wget https://raw.githubusercontent.com/${{ inputs.cicd-repository }}/${{ inputs.cicd-branch }}/config/.tflint.hcl -O .tflint-centralised.hcl
      - name: Linter Initialize - centralised
        run: tflint --config=.tflint-centralised.hcl --init
      - name: Set terraform-values-file variable
        run: |
          if [ -n "${{ inputs.terraform-values-file }}" ]; then
            echo "TF_VAR_FILE=${{ inputs.terraform-values-file }}" >> "${GITHUB_ENV}"
          else
            echo "TF_VAR_FILE=values/${{ inputs.environment }}.tfvars" >> "${GITHUB_ENV}"
          fi
      - name: Linting Code - centralised
        id: lintCentralised
        run: tflint --config=.tflint-centralised.hcl -f compact --var-file="${TF_VAR_FILE}"

  terraform-infracost:
    name: "Get Cost Estimate"
    if: github.event_name == 'pull_request' && inputs.enable-infracost
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    needs:
      - terraform-plan
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.infracost-api-key }}
          currency: GBP
      - name: Download tfplan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.environment }}-${{ github.event.pull_request.number }}
      - name: Generate Infracost Cost Estimate
        run: |
          infracost breakdown --path=tfplan.json \
            --format=json \
            --out-file=/tmp/infracost.json
      - name: Post Infracost comment
        run: |
          infracost comment github --path=/tmp/infracost.json \
            --repo="${GITHUB_REPOSITORY}" \
            --github-token=${{github.token}} \
            --pull-request=${{github.event.pull_request.number}} \
            --behavior=update \
            --tag=${{ inputs.environment }}

  terraform-plan:
    name: "Terraform Plan"
    if: (github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && contains(fromJSON('["push", "schedule"]'), github.event_name))
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    needs:
      - debug-mode
    outputs:
      result-auth: ${{ steps.bootstrap.outputs.outcome-auth }}
      result-init: ${{ steps.bootstrap.outputs.outcome-init }}
      result-validate: ${{ steps.validate.outcome }}
      result-s3-backend-check: ${{ steps.s3-backend-check.outcome }}
      result-plan: ${{ steps.plan.outcome }}
    env:
      TF_LOG: ${{ needs.debug-mode.outputs.tf_log }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Terraform Bootstrap
        id: bootstrap
        uses: appvia/appvia-cicd-workflows/.github/actions/terraform-bootstrap@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ env.AWS_WEB_IDENTITY_TOKEN_FILE }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-state-key: ${{ inputs.terraform-state-key }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ inputs.terraform-dir }} validate -no-color
      - name: Terraform S3 Backend Check
        id: s3-backend-check
        run: |
          if grep -E '^[^#]*backend\s+"s3"' terraform.tf; then
            echo "Terraform configuration references an S3 backend."
          else
            echo "Terraform configuration does not reference an S3 backend."
            exit 1
          fi
      - name: Set terraform-values-file variable
        run: |
          if [ -n "${{ inputs.terraform-values-file }}" ]; then
            echo "TF_VAR_FILE=${{ inputs.terraform-values-file }}" >> "${GITHUB_ENV}"
          else
            echo "TF_VAR_FILE=values/${{ inputs.environment }}.tfvars" >> "${GITHUB_ENV}"
          fi
      - name: Add GitHub provider credentials to environment
        run: |
          if [ -n "${{ secrets.gh-provider-app-id }}" ] && [ -n "${{ secrets.gh-provider-installation-id }}" ] && [ -n "${{ secrets.gh-provider-private-key }}" ]; then
            echo "GITHUB_APP_ID=${{ secrets.gh-provider-app-id }}" >> "${GITHUB_ENV}"
            echo "GITHUB_APP_INSTALLATION_ID=${{ secrets.gh-provider-installation-id }}" >> "${GITHUB_ENV}"
            # Decode base64 encoded private key and write to file
            echo "${{ secrets.gh-provider-private-key }}" | base64 -d > /tmp/github-app-private-key.pem
            echo "GITHUB_APP_PEM_FILE=/tmp/github-app-private-key.pem" >> "${GITHUB_ENV}"
          fi
      - name: Terraform Plan
        id: plan
        run: |
          set -o pipefail
          terraform -chdir=${{ inputs.terraform-dir }} plan \
            -var-file="${TF_VAR_FILE}" \
            -no-color -input=false \
            -out=tfplan \
            -parallelism=${{ inputs.terraform-parallelism }} \
            -lock-timeout=${{ inputs.terraform-lock-timeout }} \
            ${{ inputs.terraform-plan-extra-args }} \
            2>&1 | tee tfplan.stdout
      - name: Terraform Plan JSON Output
        run: |
          terraform -chdir=${{ inputs.terraform-dir }} show -json tfplan > tfplan.json
      - name: Simple Plan Output
        run: |
          terraform show -no-color tfplan | tee tfplan-simple
          sed -i -e '1,/Terraform will perform the following actions:/d' -e '/^[[:space:]]*$/d' tfplan-simple
          if grep -q 'Plan:' tfplan-simple; then
            plan_changes=$(grep 'Plan:' tfplan-simple)
            sed -i '/Plan:/d' tfplan-simple
            echo "${plan_changes}" > tfplan-summary
          fi
      - name: Calculate Plan Checksum
        run: sha256sum tfplan > tfplan.checksum
      - name: Upload tfplan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ inputs.environment }}-${{ github.event.pull_request.number }}
          compression-level: 9
          path: "tfplan*"
          retention-days: 14
      - name: Optional Additional Directory Upload
        if: inputs.additional-dir-optional && inputs.additional-dir != ''
        run: |
          mkdir -p ${{ inputs.additional-dir }}
          touch ${{ inputs.additional-dir }}/.optional.file
      - name: Upload additional directory
        if: inputs.additional-dir
        uses: actions/upload-artifact@v4
        with:
          name: additional-dir-${{ inputs.environment }}
          compression-level: 9
          if-no-files-found: error
          include-hidden-files: true
          path: ${{ inputs.additional-dir }}
          retention-days: 14

  terraform-checkov:
    name: "Static Security Analysis - Checkov"
    runs-on: ubuntu-latest
    if: inputs.enable-checkov
    outputs:
      result: ${{ steps.security.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Ensure Checkov Configuration
        run: |
          [ -f ".checkov.yml" ] || echo "{}" > .checkov.yml
      - name: Terraform Bootstrap
        id: bootstrap
        uses: appvia/appvia-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
      - name: Set terraform-values-file variable
        run: |
          if [ -n "${{ inputs.terraform-values-file }}" ]; then
            echo "TF_VAR_FILE=${{ inputs.terraform-values-file }}" >> $GITHUB_ENV
          else
            echo "TF_VAR_FILE=values/${{ inputs.environment }}.tfvars" >> $GITHUB_ENV
          fi
      - name: Run Checkov
        id: security
        uses: bridgecrewio/checkov-action@v12
        with:
          config_file: .checkov.yml
          directory: ${{ inputs.working-directory }}
          download_external_modules: true
          framework: terraform
          output_format: cli,sarif
          soft_fail: true
          var_file: ${TF_VAR_FILE}

  terraform-security:
    name: "Static Security Analysis"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.security.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Check If Trivy Ignore File Exists
        id: security-exceptions
        run: |
          if [ -e ".trivyignore" ]; then
            echo filename=".trivyignore" >> "${GITHUB_OUTPUT}"
          fi
      - name: Terraform Bootstrap
        id: bootstrap
        uses: appvia/appvia-cicd-workflows/.github/actions/terraform-bootstrap-noauth@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          enable-private-access: ${{ inputs.enable-private-access }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
      - name: Set terraform-values-file variable
        run: |
          if [ -n "${{ inputs.terraform-values-file }}" ]; then
            echo "TF_VAR_FILE=${{ inputs.terraform-values-file }}" >> "${GITHUB_ENV}"
          else
            echo "TF_VAR_FILE=values/${{ inputs.environment }}.tfvars" >> "${GITHUB_ENV}"
          fi
      - name: Run Trivy vulnerability
        id: security
        uses: aquasecurity/trivy-action@0.29.0
        with:
          exit-code: "1"
          format: "table"
          ignore-unfixed: true
          scan-type: "config"
          scan-ref: ${{ inputs.working-directory }}
          severity: "CRITICAL,HIGH"
          trivyignores: ${{ steps.security-exceptions.outputs.filename }}
          version: ${{ inputs.trivy-version }}
          tf-vars: $TF_VAR_FILE

  update-pr:
    name: "Update PR"
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    needs:
      - terraform-format
      - terraform-lint
      - terraform-plan
      - terraform-security
      - terraform-checkov
      - commitlint
    steps:
      - name: Download tfplan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.environment }}-${{ github.event.pull_request.number }}
        continue-on-error: true
      - name: Add PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pull Request Review Status (${{ inputs.environment }})')
            })

            // 2. Check output length
            const fs = require("fs");
            const planExists = fs.existsSync("tfplan-simple");
            if (planExists) {
              var planOutput = fs.readFileSync("tfplan-simple", "utf8");
              if (!planOutput.trim()) {
                planOutput = "No changes detected."
              }

              const planSummaryExists = fs.existsSync("tfplan-summary");
              if (planSummaryExists) {
                var planSummaryContents = fs.readFileSync("tfplan-summary", "utf8");
                const planSummaryRegex = /Plan: (\d+) to add, (\d+) to change, (\d+) to destroy\./;
                const planSummaryMatch = planSummaryContents.match(planSummaryRegex);
                var planSummaryMsg = `${planSummaryMatch[1]} to add, ${planSummaryMatch[2]} to change, ${planSummaryMatch[3]} to destroy.`
              } else {
                var planSummaryMsg = "No changes detected."
              }

              const MAX_GITHUB_COMMENT_LENGTH = 65536 - 800; // 800 characters for the comment template
              if (planOutput.length < 1 || planOutput.length > MAX_GITHUB_COMMENT_LENGTH) {
                planOutput = "Terraform Plan output is too large, please view the workflow run logs directly."
              }
            } else {
                const plan_non_existant = "Terraform Plan Output File not found, please view the workflow run logs directly."
                var planOutput = plan_non_existant
                planSummaryMsg = plan_non_existant
            }

            // 3. Prepare format of the comment
            const output = `### Pull Request Review Status (${{ inputs.environment }})
            * 🖌 <b>Terraform Format and Style:</b>     \`${{ needs.terraform-format.outputs.result }}\`
            * 🔍 <b>Terraform Linting:</b>              \`${{ needs.terraform-lint.outputs.result }}\`
            * 🔍 <b>Terraform Centralised Linting:</b>  \`${{ needs.terraform-lint.outputs.result_centralised_lint }}\`
            * 🔑 <b>AWS Authentication:</b>             \`${{ needs.terraform-plan.outputs.result-auth }}\`
            * 👮 <b>Terraform Security Check:</b>       \`${{ needs.terraform-security.outputs.result }}\`
            * 👮 <b>Terraform Security Checkov:</b>     \`${{ needs.terraform-checkov.outputs.result }}\`
            * 🔧 <b>Terraform Initialisation:</b>       \`${{ needs.terraform-plan.outputs.result-init }}\`
            * 🤖 <b>Terraform Validation:</b>           \`${{ needs.terraform-plan.outputs.result-validate }}\`
            * 📁 <b>Terraform S3 Backend:</b>           \`${{ needs.terraform-plan.outputs.result-s3-backend-check }}\`
            * 📖 <b>Terraform Plan:</b>                 \`${{ needs.terraform-plan.outputs.result-plan }}\`
            * 🔖 <b>Commitlint:</b>                     \`${{ needs.commitlint.outputs.result }}\`

            <details><summary><b>Output: 📖 Terraform Plan</b></summary>

            \`\`\`
            ${planOutput}
            \`\`\`
            </details>

            <b>Plan Summary:</b> \`${planSummaryMsg}\`

            *<b>Pusher:</b> @${{ github.actor }}, <b>Action:</b> \`${{ github.event_name }}\`*
            *<b>Workflow Run Link:</b> ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}*`;

            // 4. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' && contains(fromJSON('["push", "schedule"]'), github.event_name) && inputs.enable-terraform-apply
    environment: ${{ inputs.environment }}
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    env:
      TF_LOG: ${{ needs.debug-mode.outputs.tf_log }}
    needs:
      - terraform-format
      - terraform-lint
      - terraform-plan
      - debug-mode
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Terraform Bootstrap
        id: init
        uses: appvia/appvia-cicd-workflows/.github/actions/terraform-bootstrap@main
        with:
          appvia-actions-id: ${{ secrets.appvia-actions-id }}
          appvia-actions-secret: ${{ secrets.appvia-actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ env.AWS_WEB_IDENTITY_TOKEN_FILE }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-state-key: ${{ inputs.terraform-state-key }}
          terraform-version: ${{ inputs.terraform-version }}
          working-directory: ${{ inputs.working-directory }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}
      - name: Download tfplan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.environment }}-${{ github.event.pull_request.number }}
        continue-on-error: true
      - name: Check Artifact Availability
        run: |
          if [ ! -f tfplan ]; then
            echo "tfplan artifact not found. Please regenerate the plan."
            exit 1
          fi
      - name: Download Additional Directories
        if: inputs.additional-dir
        uses: actions/download-artifact@v4
        with:
          name: additional-dir-${{ inputs.environment }}
          path: ${{ inputs.additional-dir }}
      - name: Validate Plan Checksum
        run: |
          if [ ! -f tfplan.checksum ]; then
            echo "Checksum file is missing. The tfplan artifact may not have been generated or uploaded correctly. Halting Terraform Apply phase."
            exit 1
          fi
          echo "Validating the checksum of the tfplan artifact..."
          if sha256sum -c tfplan.checksum; then
            echo "Checksum validation succeeded. The tfplan artifact is intact and matches the original plan."
          else
            echo "Checksum validation failed. The tfplan artifact has been modified or tampered with since the plan was generated."
            echo "Halting Terraform Apply phase to ensure the integrity of the deployment process."
            exit 1
          fi
      - name: Add GitHub provider credentials to environment
        run: |
          if [ -n "${{ secrets.gh-provider-app-id }}" ] && [ -n "${{ secrets.gh-provider-installation-id }}" ] && [ -n "${{ secrets.gh-provider-private-key }}" ]; then
            echo "GITHUB_APP_ID=${{ secrets.gh-provider-app-id }}" >> "${GITHUB_ENV}"
            echo "GITHUB_APP_INSTALLATION_ID=${{ secrets.gh-provider-installation-id }}" >> "${GITHUB_ENV}"
            # Decode base64 encoded private key and write to file
            echo "${{ secrets.gh-provider-private-key }}" | base64 -d > /tmp/github-app-private-key.pem
            echo "GITHUB_APP_PEM_FILE=/tmp/github-app-private-key.pem" >> "${GITHUB_ENV}"
          fi
      - name: Terraform Apply
        run: |
          terraform apply \
            -auto-approve \
            -input=false \
            -parallelism=${{ inputs.terraform-parallelism }} \
            -lock-timeout=${{ inputs.terraform-lock-timeout }} \
            ${{ inputs.terraform-apply-extra-args }} \
            tfplan
