name: Terraform Validate, Plan & Apply
on:
  workflow_call:
    inputs:
      aws-region:
        default: 'eu-west-2'
        description: 'The AWS region to deploy to'
        required: false
        type: string

      aws-role-arn:
        description: 'The AWS role to assume'
        required: true
        type: string

      aws-s3-bucket-name:
        description: 'The AWS S3 bucket to store the terraform state'
        required: true
        type: string

      aws-dynamodb-table-name:
        description: 'The AWS DynamoDB table to store the terraform state'
        required: true
        type: string

      runs-on:
        default: 'ubuntu-latest'
        description: 'The runner to use'
        required: false
        type: string

      terraform-log-level:
        default: 'INFO'
        description: 'The log level of terraform'
        required: false
        type: string

      terraform-state-key:
        default: '${{ github.event.repository.name }}.tfstate'
        description: 'The key of the terraform state'
        required: false
        type: string

      terraform-values-file:
        default: 'values/production.tfvars'
        description: 'The values file to use'
        required: false
        type: string

      terraform-version:
        default: '1.5.2'
        description: 'The version of terraform to use'
        required: false
        type: string

env:
  TF_LOG: ${{ inputs.terraform-log-level }}
  AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/web_identity_token_file

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-format:
    name: "Terraform Format"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.format.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Format
        id: format
        run: terraform fmt -check
  terraform-lint:
    name: "Terraform Lint"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.lint.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Linter
        uses: terraform-linters/setup-tflint@v3
      - name: Linter Initialize
        run: tflint --init
      - name: Linting Code
        id: lint
        run: tflint -f compact
  terraform-plan:
    name: "Terraform Plan"
    if: github.event_name == 'pull_request'
    runs-on: ${{ inputs.runs-on }}
    outputs:
      result-auth: ${{ steps.auth.outcome }}
      result-init: ${{ steps.init.outcome }}
      result-validate: ${{ steps.validate.outcome }}
      result-plan: ${{ steps.plan.outcome }}
      plan-output: ${{ steps.plan.outputs.stdout }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Retrieve Web Identity Token for AWS Authentication
        run: |
          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
      - name: Authenticate with AWS
        id: auth
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ inputs.aws-region }}
          role-session-name: ${{ github.event.repository.name }}
          role-to-assume: ${{ inputs.aws-role-arn }}
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ inputs.aws-s3-bucket-name }}" -backend-config="key=${{ inputs.terraform-state-key }}" -backend-config="encrypt=true" -backend-config="dynamodb_table=${{ inputs.aws-dynamodb-table-name }}" -backend-config="region=${{ inputs.aws-region }}"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform plan
        id: plan
        run: terraform plan -var-file=${{ inputs.terraform-values-file }} -no-color -input=false
  update-pr:
    name: "Update PR"
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    needs:
      - terraform-format
      - terraform-lint
      - terraform-plan
    steps:
      - name: Add PR Comment
        uses: actions/github-script@v6
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pull Request Review Status')
            })

            // 2. Prepare format of the comment
            const output = `### Pull Request Review Status
            * 🖌 Terraform Format and Style: \`${{ needs.terraform-format.outputs.result }}\`
            * 🔍 Terraform Linting:          \`${{ needs.terraform-lint.outputs.result }}\`
            * 🔑 AWS Authentication:         \`${{ needs.terraform-plan.outputs.result-auth }}\`
            * 🔧 Terraform Initialisation:   \`${{ needs.terraform-plan.outputs.result-init }}\`
            * 🤖 Terraform Validation:       \`${{ needs.terraform-plan.outputs.result-validate }}\`
            * 📖 Terraform Plan:             \`${{ needs.terraform-plan.outputs.result-plan }}\`

            <details><summary><b>Output: 📖 Terraform Plan</b></summary>

            \`\`\`\n
            ${{ needs.terraform-plan.outputs.plan-output }}
            \`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ${{ inputs.runs-on }}
    needs:
      - terraform-format
      - terraform-lint
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Retrieve Web Identity Token for AWS Authentication
        run: |
          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
      - name: Authenticate with AWS
        id: auth
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ inputs.aws-region }}
          role-session-name: ${{ github.event.repository.name }}
          role-to-assume: ${{ inputs.aws-role-arn }}
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ inputs.aws-s3-bucket-name }}" -backend-config="key=${{ inputs.terraform-state-key }}" -backend-config="encrypt=true" -backend-config="dynamodb_table=${{ inputs.aws-dynamodb-table-name }}" -backend-config="region=${{ inputs.aws-region }}"
      - name: Terraform Apply
        run: terraform apply -var-file=${{ inputs.terraform-values-file }} -auto-approve -input=false
