name: Terraform Module Validation
on:
  workflow_call:
    secrets:
      infracost-api-key:
        description: "The API key for infracost"
        required: false
    inputs:
      enable-infracost:
        default: false
        description: "Whether to run infracost on the Terraform Plan (secrets.infracost-api-key must be set if enabled)"
        required: false
        type: boolean
      terraform-version:
        default: "1.7.1"
        description: "The version of terraform to use"
        required: false
        type: string
      terraform-dir:
        default: "."
        description: "The directory to validate"
        required: false
        type: string
      working-directory:
        default: "."
        description: "Working directory"
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-format:
    name: "Terraform Format"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.format.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Format
        id: format
        run: terraform fmt -check

  terraform-lint:
    name: "Terraform Lint"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.lint.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Init
        run: terraform -chdir=${{ inputs.terraform-dir }} init -backend=false
      - name: Setup Linter
        uses: terraform-linters/setup-tflint@v3
      - name: Linter Initialize
        run: tflint --init
      - name: Linting Code
        id: lint
        run: tflint -f compact

  terraform-tests:
    name: "Terraform Unit Tests"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.tests.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Init
        run: terraform -chdir=${{ inputs.terraform-dir }} init -backend=false
      - name: Run Tests
        id: tests
        run: terraform -chdir=${{ inputs.terraform-dir }} test

  terraform-init:
    name: "Terraform Init"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.init.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 16
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ inputs.terraform-dir }} init

  terraform-validate:
    name: "Terraform Validate"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.validate.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 16
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ inputs.terraform-dir }} init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ inputs.terraform-dir }} validate -no-color

  terraform-security:
    name: "Terraform Security"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.security.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Tfsec
        id: security
        uses: aquasecurity/tfsec-action@v1.0.0

  terraform-docs:
    name: "Terraform Docs"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result: ${{ steps.docs.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Terraform Docs
        id: docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          fail-on-diff: true
          output-file: README.md
          output-method: inject

  get-cost-estimate:
    name: "Get Cost Estimate"
    if: github.event_name == 'pull_request' && inputs.enable-infracost
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.infracost-api-key }}
          currency: GBP
      - name: Checkout PR Base Branch
        uses: actions/checkout@v4
        with:
          ref: "${{ github.event.pull_request.base.ref }}"
      - name: Check For TF Files
        id: baseline
        run: |
          if ls *.tf 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Generate Cost Estimate Baseline
        if: steps.baseline.outputs.exists == 'true'
        run: |
          infracost breakdown --path=${TF_ROOT} \
            --format=json \
            --out-file=/tmp/infracost-base.json
      - name: Checkout PR branch
        uses: actions/checkout@v4
      - name: Generate Cost Estimate Difference
        if: steps.baseline.outputs.exists == 'true'
        run: |
          infracost diff --path=${TF_ROOT} \
            --format=json \
            --compare-to=/tmp/infracost-base.json \
            --out-file=/tmp/infracost.json
      - name: Generate Infracost Cost Estimate
        if: steps.baseline.outputs.exists == 'false'
        run: |
          infracost breakdown --path=${TF_ROOT} \
            --format=json \
            --out-file=/tmp/infracost.json
      - name: Post Infracost comment
        run: |
          infracost comment github --path=/tmp/infracost.json \
            --repo=$GITHUB_REPOSITORY \
            --github-token=${{github.token}} \
            --pull-request=${{github.event.pull_request.number}} \
            --behavior=update

  update-pr:
    name: "Update PR"
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    needs:
      - terraform-format
      - terraform-lint
      - terraform-init
      - terraform-validate
      - terraform-tests
      - terraform-security
      - terraform-docs
    steps:
      - name: Add PR Comment
        uses: actions/github-script@v6
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pull Request Review Status') && comment.body.includes('<b>Working Directory:</b> \`${{ inputs.working-directory }}\`')
            })

            // 2. Prepare format of the comment
            const output = `### Pull Request Review Status
            * 🖌 <b>Terraform Format and Style:</b> \`${{ needs.terraform-format.outputs.result }}\`
            * 🔍 <b>Terraform Linting:</b>          \`${{ needs.terraform-lint.outputs.result }}\`
            * 🔧 <b>Terraform Initialisation:</b>   \`${{ needs.terraform-init.outputs.result }}\`
            * 🤖 <b>Terraform Validation:</b>       \`${{ needs.terraform-validate.outputs.result }}\`
            * 👮 <b>Terraform Security Check:</b>   \`${{ needs.terraform-security.outputs.result }}\`
            * 🔘 <b>Terraform Tests:</b>            \`${{ needs.terraform-tests.outputs.result }}\`
            * 📖 <b>Terraform Documentation:</b>    \`${{ needs.terraform-docs.outputs.result }}\`

            *<b>Working Directory:</b> \`${{ inputs.working-directory }}\`*
            *<b>Pusher:</b> @${{ github.actor }}, <b>Action:</b> \`${{ github.event_name }}\`*
            *<b>Workflow Run Link:</b> ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
