name: Terraform Module Validation
on:
  workflow_call:
    inputs:
      terraform-version:
        default: '1.5.2'
        description: 'The version of terraform to use'
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-format:
    name: "Terraform Format"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.format.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Format
        id: format
        run: terraform fmt -check
  terraform-lint:
    name: "Terraform Lint"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.lint.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Linter
        uses: terraform-linters/setup-tflint@v3
      - name: Linter Initialize
        run: tflint --init
      - name: Linting Code
        id: lint
        run: tflint -f compact
  terraform-init:
    name: "Terraform Init"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.init.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Init
        id: init
        run: terraform init
  terraform-validate:
    name: "Terraform Validate"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.validate.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
  terraform-docs:
    name: "Terraform Docs"
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.docs.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Terraform Docs
        id: docs
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          fail-on-diff: true
  update-pr:
    name: "Update PR"
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    needs:
      - terraform-format
      - terraform-lint
      - terraform-init
      - terraform-validate
      - terraform-docs
    steps:
      - name: Add PR Comment
        uses: actions/github-script@v6
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pull Request Review Status')
            })

            // 2. Prepare format of the comment
            const output = `### Pull Request Review Status
            * 🖌 Terraform Format and Style: \`${{ needs.terraform-format.outputs.result }}\`
            * 🔍 Terraform Linting:          \`${{ needs.terraform-lint.outputs.result }}\`
            * 🔧 Terraform Initialisation:   \`${{ needs.terraform-init.outputs.result }}\`
            * 🤖 Terraform Validation:       \`${{ needs.terraform-validate.outputs.result }}\`
            * 📖 Terraform Documentation:    \`${{ needs.terraform-docs.outputs.result }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
