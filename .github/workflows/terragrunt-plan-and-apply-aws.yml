---
name: Terragrunt Validate, Plan & Apply
on:
  workflow_call:
    secrets:
      actions-id:
        description: "Github App ID for GH"
        required: false

      actions-secret:
        description: "Github App secret for GH"
        required: false

      github-token:
        description: "The Github token to use for the landing zone repository creation"
        required: false

      infracost-api-key:
        description: "The API key for infracost"
        required: false

    inputs:
      aws-account-id:
        description: "The AWS account ID to deploy to"
        required: true
        type: string

      aws-role:
        default: "${{ github.event.repository.name }}"
        description: "The AWS role to assume"
        required: false
        type: string

      aws-read-role-name:
        description: "Overrides the default behavior, and uses a custom role name for read-only access"
        required: false
        type: string

      aws-write-role-name:
        description: "Overrides the default behavior, and uses a custom role name for read-write access"
        required: false
        type: string

      aws-region:
        default: "eu-west-2"
        description: "The AWS region to deploy to"
        required: false
        type: string

      aws-web-identity-token-file:
        description: "The file containing the AWS web identity token"
        required: false
        type: string
        default: "/tmp/web_identity_token_file"

      cicd-repository:
        default: "appvia/appvia-cicd-workflows"
        description: "The repository to pull the CI/CD workflows from"
        required: false
        type: string

      cicd-branch:
        default: "main"
        description: "The branch to pull the CI/CD workflows from"
        required: false
        type: string

      enable-infracost:
        default: false
        description: "Whether to run infracost on the Terraform Plan (secrets.infracost-api-key must be set if enabled)"
        required: false
        type: boolean

      enable-commitlint:
        default: true
        description: "Whether to run commitlint on the commit message"
        required: false
        type: boolean

      enable-terragrunt-apply:
        default: true
        description: "Whether to run terragrunt apply on merge to main"
        required: false
        type: boolean

      enable-terragrunt-plan:
        default: false
        description: "Whether to run terragrunt plan on merge to main"
        required: false
        type: boolean

      enable-matrix:
        default: false
        description: "Indicates if should run the terragrunt plan matrix workflow"
        required: false
        type: boolean

      enable-private-access:
        description: Optional flag to state if terraform requires pulling private modules
        required: false
        default: false
        type: boolean

      organization-name:
        description: "The name of the Github organization"
        required: false
        type: string
        default: "appvia"

      environment:
        default: "production"
        description: "The environment to deploy to"
        required: false
        type: string

      runs-on:
        default: "ubuntu-latest"
        description: "Single label value for the GitHub runner to use"
        required: false
        type: string

      terraform-apply-extra-args:
        default: ""
        description: "Extra arguments to pass to terragrunt apply"
        required: false
        type: string

      terragrunt-apply-extra-args:
        default: "-parallelism=10"
        description: "Extra arguments to pass to terragrunt apply"
        required: false
        type: string

      terragrunt-dir:
        default: "."
        description: "The directory to validate"
        required: false
        type: string

      terraform-lock-timeout:
        default: "30s"
        description: The time to wait for a lock
        required: false
        type: string

      terraform-log-level:
        default: ""
        description: "The log level of terraform"
        required: false
        type: string

      terraform-plan-extra-args:
        default: ""
        description: "Extra arguments to pass to terraform plan"
        required: false
        type: string

      terragrunt-plan-extra-args:
        default: "-parallelism=10"
        description: "Extra arguments to pass to terragrunt plan"
        required: false
        type: string

      terraform-parallelism:
        default: 20
        description: "The number of parallel operations to run"
        required: false
        type: number

      terraform-version:
        default: "1.13.3"
        description: "The version of terraform to use"
        required: false
        type: string

      terragrunt-version:
        default: "0.88.1"
        description: "The version of terragrunt to use"
        required: false
        type: string

      terragrunt-config-file:
        default: "terragrunt.hcl"
        description: "The configuration file to use for terragrunt"
        required: false
        type: string

      trivy-version:
        default: "v0.60.0"
        description: "The version of trivy to use"
        required: false
        type: string

      use-env-as-suffix:
        default: false
        description: "Whether to use the environment as a suffix for the state file and iam roles"
        required: false
        type: boolean

env:
  AWS_ROLE: ${{ inputs.aws-role }}
  AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/web_identity_token_file

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  debug-mode:
    name: "Debug Mode"
    runs-on: ubuntu-latest
    outputs:
      tf_log: ${{ steps.debug.outputs.tf_log }}
    steps:
      - name: Debug Mode Vars
        id: debug
        run: |
          if "${{ runner.debug == true }}"; then
            if [ "${{ inputs.terraform-log-level }}" == "TRACE" ]; then
              echo "tf_log=TRACE" >> "$GITHUB_ENV" 
            else
              echo "tf_log=DEBUG" >> "$GITHUB_OUTPUT" 
            fi
          else
            echo "tf_log=${{ inputs.terraform-log-level }}" >> "$GITHUB_OUTPUT" 
          fi

  commitlint:
    name: "Commitlint"
    if: github.event_name == 'pull_request' && inputs.enable-commitlint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    outputs:
      result: ${{ steps.commitlint.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 16
      - name: Install Dependencies
        run: npm install @commitlint/config-conventional @commitlint/cli
      - name: Retrieve Commit Configuration
        run: |
          wget https://raw.githubusercontent.com/${{ inputs.cicd-repository }}/${{ inputs.cicd-branch }}/config/commitlint.config.js -O commitlint.config.js
      - name: Run Commitlint
        id: commitlint
        run: npx commitlint --config commitlint.config.js --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }}

  terragrunt-hclfmt:
    name: "Terragrunt HCL Format"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    outputs:
      result: ${{ steps.hclfmt.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terragrunt HCL Format
        id: hclfmt
        run: |
          find . -name "*.hcl" -not -path '*.terraform*' -not -path '*.terragrunt-cache*' -exec terragrunt hcl format --file {} --diff --check \;

  terragrunt-render:
    name: "Terragrunt Inputs"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    outputs:
      result: ${{ steps.render.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Setup Terragrunt
        uses: gruntwork-io/terragrunt-action@v3
        with:
          tg_version: ${{ inputs.terragrunt-version }}
          tf_path: /bin/terraform

      - name: Terragrunt Render
        id: render
        run: |
          terragrunt render --config ${{ inputs.terragrunt-config-file }} --all

  terragrunt-format:
    name: "Terragrunt Format"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    outputs:
      result: ${{ steps.format.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terragrunt Bootstrap
        uses: ./.github/actions/terragrunt-bootstrap
        with:
          actions-id: ${{ secrets.actions-id }}
          actions-secret: ${{ secrets.actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ inputs.aws-web-identity-token-file }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terragrunt-dir: ${{ inputs.terragrunt-dir }}
          terraform-version: ${{ inputs.terraform-version }}
          terragrunt-version: ${{ inputs.terragrunt-version }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}

      - name: Format Terragrunt files
        id: format
        run: |
          terragrunt run --config ${{ inputs.terragrunt-config-file }} --all -- fmt

  terragrunt-lint:
    name: "Terragrunt Lint"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    outputs:
      result: ${{ steps.lint.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Terragrunt Bootstrap
        uses: ./.github/actions/terragrunt-bootstrap
        with:
          actions-id: ${{ secrets.actions-id }}
          actions-secret: ${{ secrets.actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ inputs.aws-web-identity-token-file }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terragrunt-dir: ${{ inputs.terragrunt-dir }}
          terraform-version: ${{ inputs.terraform-version }}
          terragrunt-version: ${{ inputs.terragrunt-version }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Generate Terraform files
        run: |
          terragrunt init --config ${{ inputs.terragrunt-config-file }} --all --backend=false

      - name: Run TFLint
        id: lint
        run: |
          # Find all .terragrunt-cache directories and run tflint on them
          find . -name ".terragrunt-cache" -type d | while IFS= read -r cache_dir; do
            if [ -d "$cache_dir" ]; then
              echo "Running tflint in $cache_dir"
              cd "$cache_dir" || continue
              
              # Find the actual terraform files (usually in a subdirectory)
              terraform_dir=$(find . -name "*.tf" -type f | head -1 | xargs dirname 2>/dev/null)
              if [ -d "$terraform_dir" ] && [ -n "$terraform_dir" ]; then
                cd "$terraform_dir" || continue
                echo "  Found terraform files in: $terraform_dir"
                tflint --init
                tflint --format compact
              else
                echo "  No terraform files found in $cache_dir"
              fi
              cd - > /dev/null
            else
              echo "Directory $cache_dir does not exist, skipping"
            fi
          done

  terragrunt-security:
    name: "Static Security Analysis"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    outputs:
      result: ${{ steps.security.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Check If Trivy Ignore File Exists
        id: security-exceptions
        run: |
          if [ -e ".trivyignore" ]; then
            echo filename=".trivyignore" >> "${GITHUB_OUTPUT}"
          fi
      - name: Terragrunt Bootstrap
        id: bootstrap
        uses: ./.github/actions/terragrunt-bootstrap
        with:
          actions-id: ${{ secrets.actions-id }}
          actions-secret: ${{ secrets.actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ inputs.aws-web-identity-token-file }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terragrunt-dir: ${{ inputs.terragrunt-dir }}
          terraform-version: ${{ inputs.terraform-version }}
          terragrunt-version: ${{ inputs.terragrunt-version }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}

      - name: Run Trivy vulnerability
        id: security
        run: |
          echo "Needs to be implemented"

  terragrunt-validate:
    name: "Terragrunt Validate"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    outputs:
      result: ${{ steps.validate.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Terragrunt Bootstrap
        uses: ./.github/actions/terragrunt-bootstrap
        with:
          actions-id: ${{ secrets.actions-id }}
          actions-secret: ${{ secrets.actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ inputs.aws-web-identity-token-file }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terragrunt-dir: ${{ inputs.terragrunt-dir }}
          terraform-version: ${{ inputs.terraform-version }}
          terragrunt-version: ${{ inputs.terragrunt-version }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}

      - name: Terragrunt Validate
        id: validate
        run: terragrunt validate --config ${{ inputs.terragrunt-config-file }} --all

  terragrunt-diff:
    name: "Terragrunt Inputs Diff"
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && contains(fromJSON('["schedule"]'), github.event_name)) || (github.ref == 'refs/heads/main' && inputs.enable-terragrunt-plan)
    defaults:
      run:
        working-directory: .
    needs:
      - debug-mode
    outputs:
      result: ${{ steps.diff.outputs.result }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Terragrunt Inputs Diff
        id: diff
        uses: ./.github/actions/terragrunt-diff
        with:
          terraform-version: ${{ inputs.terraform-version }}
          terragrunt-version: ${{ inputs.terragrunt-version }}

  terragrunt-matrix:
    name: "Terragrunt Matrix"
    if: inputs.enable-matrix == true && ((github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && contains(fromJSON('["schedule"]'), github.event_name)) || (github.ref == 'refs/heads/main' && inputs.enable-terragrunt-plan))
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    outputs:
      count: ${{ steps.matrix.outputs.count }}
      matrix: ${{ steps.matrix.outputs.matrix }}
      units: ${{ steps.matrix.outputs.units }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Terragrunt Plan Matrix
        id: matrix
        uses: ./.github/actions/terragrunt-matrix
        with:
          terragrunt-dir: "${{ inputs.terragrunt-dir }}"
          account-files: "${{ inputs.terragrunt-config-file }}"
          exclude-patterns: ".terragrunt-cache,node_modules,.git"
          include-region: "true"
          include-account: "true"
          include-unit-name: "true"
          include-relative-path: "true"
          matrix-key: "unit"
          include-path: "true"

  terragrunt-plan-matrix:
    name: "Terragrunt Plan (${{ matrix.unit.region }}/${{ matrix.unit.unit_name }})"
    if: inputs.enable-matrix == true && needs.terragrunt-matrix.outputs.count > 0 && ((github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && contains(fromJSON('["schedule"]'), github.event_name)) || (github.ref == 'refs/heads/main' && inputs.enable-terragrunt-plan))
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    needs:
      - terragrunt-matrix
    strategy:
      matrix: ${{ fromJson(needs.terragrunt-matrix.outputs.matrix) }}
    outputs:
      result-auth: ${{ steps.bootstrap.outputs.outcome-auth }}
      result-plan: ${{ steps.plan.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract Directory Name
        id: extract-directory-name
        run: |
          echo "directory_name=$(dirname ${{ matrix.unit.relative_path }})" >> "${GITHUB_OUTPUT}"

      - name: Terragrunt Bootstrap
        id: bootstrap
        uses: ./.github/actions/terragrunt-bootstrap
        with:
          actions-id: ${{ secrets.actions-id }}
          actions-secret: ${{ secrets.actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ inputs.aws-web-identity-token-file }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terragrunt-dir: ${{ steps.extract-directory-name.outputs.directory_name }}
          terraform-version: ${{ inputs.terraform-version }}
          terragrunt-version: ${{ inputs.terragrunt-version }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}

      - name: Process Unit
        run: |
          echo "Processing unit: ${{ matrix.unit.unit_name }}"
          echo "File: ${{ matrix.unit.file }}"
          echo "Terragrunt Dir: ${{ steps.extract-directory-name.outputs.directory_name }}"
          echo "Region: ${{ matrix.unit.region }}"
          echo "Account: ${{ matrix.unit.account }}"

      - name: Terragrunt Plan
        id: plan
        working-directory: ${{ steps.extract-directory-name.outputs.directory_name }}
        run: |
          set -o pipefail
          terragrunt run --config ${{ inputs.terragrunt-config-file }} --all ${{ inputs.terragrunt-plan-extra-args }} -- \
            plan \
            -no-color -input=false \
            -parallelism=${{ inputs.terraform-parallelism }} \
            -lock-timeout=${{ inputs.terraform-lock-timeout }} \
            ${{ inputs.terraform-plan-extra-args }} \
            2>&1 | tee tfplan.stdout

  terragrunt-plan:
    name: "Terragrunt Plan"
    if: inputs.enable-matrix == false && ((github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && contains(fromJSON('["schedule"]'), github.event_name)) || (github.ref == 'refs/heads/main' && inputs.enable-terragrunt-plan))
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    needs:
      - debug-mode
      - terragrunt-validate
    outputs:
      result-auth: ${{ steps.bootstrap.outputs.outcome-auth }}
      result-plan: ${{ steps.plan.outcome }}
    env:
      TF_LOG: ${{ needs.debug-mode.outputs.tf_log }}
      TF_VAR_github_token: ${{ secrets.github-token }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Terragrunt Bootstrap
        id: bootstrap
        uses: ./.github/actions/terragrunt-bootstrap
        with:
          actions-id: ${{ secrets.actions-id }}
          actions-secret: ${{ secrets.actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ inputs.aws-web-identity-token-file }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terragrunt-dir: ${{ inputs.terragrunt-dir }}
          terraform-version: ${{ inputs.terraform-version }}
          terragrunt-version: ${{ inputs.terragrunt-version }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}

      - name: Terragrunt Plan
        id: plan
        run: |
          echo "Running Terragrunt Plan on: ${{ inputs.terragrunt-dir }}"
          set -o pipefail
          terragrunt run --config ${{ inputs.terragrunt-config-file }} --all ${{ inputs.terragrunt-plan-extra-args }} -- \
            plan \
            -no-color -input=false \
            -parallelism=${{ inputs.terraform-parallelism }} \
            -lock-timeout=${{ inputs.terraform-lock-timeout }} \
            ${{ inputs.terraform-plan-extra-args }} \
            2>&1 | tee tfplan.stdout

  terragrunt-infracost:
    name: "Terragrunt Get Cost Estimate"
    if: github.event_name == 'pull_request' && inputs.enable-infracost
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    needs:
      - terragrunt-plan
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.infracost-api-key }}
          currency: GBP

      - name: Download tfplan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.environment }}-${{ github.event.pull_request.number }}

      - name: Generate Infracost Cost Estimate
        run: |
          infracost breakdown --path=tfplan.json \
            --format=json \
            --out-file=/tmp/infracost.json

      - name: Post Infracost comment
        run: |
          infracost comment github --path=/tmp/infracost.json \
            --repo="${GITHUB_REPOSITORY}" \
            --github-token=${{github.token}} \
            --pull-request=${{github.event.pull_request.number}} \
            --behavior=update \
            --tag=${{ inputs.environment }}

  terragrunt-apply:
    name: "Terragrunt Apply"
    if: github.ref == 'refs/heads/main' && contains(fromJSON('["push", "schedule", "workflow_dispatch"]'), github.event_name) && inputs.enable-terragrunt-apply
    environment: ${{ inputs.environment }}
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    env:
      TF_LOG: ${{ needs.debug-mode.outputs.tf_log }}
      TF_VAR_github_token: ${{ secrets.github-token }}
    needs:
      - terragrunt-format
      - terragrunt-hclfmt
      - terragrunt-lint
      - terragrunt-render
      - terragrunt-security
      - debug-mode
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Terraform Bootstrap
        id: init
        uses: ./.github/actions/terragrunt-bootstrap
        with:
          actions-id: ${{ secrets.actions-id }}
          actions-secret: ${{ secrets.actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ env.AWS_WEB_IDENTITY_TOKEN_FILE }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terragrunt-dir: ${{ inputs.terragrunt-dir }}
          terraform-version: ${{ inputs.terraform-version }}
          terragrunt-version: ${{ inputs.terragrunt-version }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}

      - name: Terragrunt Apply
        run: |
          terragrunt run --config ${{ inputs.terragrunt-config-file }} --all --non-interactive ${{ inputs.terragrunt-apply-extra-args }} -- \
            apply \
            -auto-approve \
            -input=false \
            -parallelism=${{ inputs.terraform-parallelism }} \
            -lock-timeout=${{ inputs.terraform-lock-timeout }} \
            ${{ inputs.terraform-apply-extra-args }}

  update-matrix-pr-comment:
    name: "Update Matrix Pull Request"
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    needs:
      - commitlint
      - terragrunt-diff
      - terragrunt-format
      - terragrunt-hclfmt
      - terragrunt-lint
      - terragrunt-plan-matrix
      - terragrunt-render
      - terragrunt-security
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Add PR Comment
        uses: ./.github/actions/terragrunt-pr
        with:
          status-format: ${{ needs.terragrunt-format.outputs.result }}
          status-hcl-format: ${{ needs.terragrunt-hclfmt.outputs.result }}
          status-inputs-render: ${{ needs.terragrunt-render.outputs.result }}
          status-inputs-diff: ${{ needs.terragrunt-diff.outputs.result }}
          status-linting: ${{ needs.terragrunt-lint.outputs.result }}
          status-security: ${{ needs.terragrunt-security.outputs.result }}
          status-auth: ${{ needs.terragrunt-plan-matrix.outputs.result-auth }}
          status-plan: ${{ needs.terragrunt-plan-matrix.outputs.result-plan }}
          status-commitlint: ${{ needs.commitlint.outputs.result }}
          environment: ${{ inputs.environment }}
          working-directory: ${{ inputs.terragrunt-dir }}

  update-pr-comment:
    name: "Update Pull Request"
    if: github.event_name == 'pull_request' && (success() || failure())
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terragrunt-dir }}
    needs:
      - commitlint
      - terragrunt-diff
      - terragrunt-format
      - terragrunt-hclfmt
      - terragrunt-lint
      - terragrunt-plan
      - terragrunt-render
      - terragrunt-security
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Add PR Comment
        uses: ./.github/actions/terragrunt-pr
        with:
          status-format: ${{ needs.terragrunt-format.outputs.result }}
          status-hcl-format: ${{ needs.terragrunt-hclfmt.outputs.result }}
          status-inputs-render: ${{ needs.terragrunt-render.outputs.result }}
          status-inputs-diff: ${{ needs.terragrunt-diff.outputs.result }}
          status-linting: ${{ needs.terragrunt-lint.outputs.result }}
          status-security: ${{ needs.terragrunt-security.outputs.result }}
          status-auth: ${{ needs.terragrunt-plan.outputs.result-auth }}
          status-plan: ${{ needs.terragrunt-plan.outputs.result-plan }}
          status-commitlint: ${{ needs.commitlint.outputs.result }}
          environment: ${{ inputs.environment }}
          working-directory: ${{ inputs.terragrunt-dir }}
