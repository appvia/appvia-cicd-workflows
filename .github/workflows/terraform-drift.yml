---
name: Terraform Drift Detection

on:
  workflow_call:
    secrets:
      slack-webhook-url:
        description: "The Slack webhook URL"
        required: false
      actions-id:
        description: "Appvia App ID for GH"
        required: false
      actions-secret:
        description: "Appvia App secret for GH"
        required: false

    inputs:
      aws-account-id:
        description: "The AWS account ID to deploy to"
        required: true
        type: string

      aws-region:
        default: "eu-west-2"
        description: "The AWS region to deploy to"
        required: false
        type: string

      aws-role:
        default: "${{ github.event.repository.name }}"
        description: "The AWS role to assume"
        required: false
        type: string

      aws-read-role-name:
        description: "Overrides the default behavior, and uses a custom role name for read-only access"
        required: false
        type: string

      aws-write-role-name:
        description: "Overrides the default behavior, and uses a custom role name for read-write access"
        required: false
        type: string

      enable-opentofu:
        description: "Use OpenTofu instead of Terraform"
        type: boolean
        default: false

      enable-private-access:
        description: Optional flag to state if terraform requires pulling private modules
        required: false
        default: false
        type: boolean

      environment:
        default: "production"
        description: "The environment to deploy to"
        required: false
        type: string

      organization-name:
        description: "The name of the Github organization"
        required: false
        type: string
        default: "appvia"

      use-env-as-suffix:
        default: false
        description: "Whether to use the environment as a suffix for the state file and iam roles"
        required: false
        type: boolean

      runs-on:
        default: "ubuntu-latest"
        description: "Single label value for the GitHub runner to use (custom value only applies to Terraform Plan and Apply steps)"
        required: false
        type: string

      terraform-dir:
        default: "."
        description: "The directory to validate"
        required: false
        type: string

      terraform-init-extra-args:
        default: ""
        description: "Extra arguments to pass to terraform init"
        required: false
        type: string

      terraform-lock-timeout:
        default: "30s"
        description: The time to wait for a lock
        required: false
        type: string

      terraform-state-key:
        default: ""
        description: "The key of the terraform state (default: <repo-name>.tfstate)"
        required: false
        type: string

      terraform-values-file:
        default: ""
        description: "The values file to use (default: <environment>.tfvars)"
        required: false
        type: string

      terraform-version:
        default: "1.11.2"
        description: "The version of terraform to use"
        required: false
        type: string

      working-directory:
        default: "."
        description: "The working directory to run terraform commands in"
        required: false
        type: string

env:
  AWS_ROLE: ${{ inputs.aws-role }}
  AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/web_identity_token_file
  TOOL_NAME: ${{ inputs.enable-opentofu == 'true' && 'opentofu' || 'terraform' }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    outputs:
      result-auth: ${{ steps.bootstrap.outputs.outcome-auth }}
      result-init: ${{ steps.bootstrap.outputs.outcome-init }}
      result-validate: ${{ steps.validate.outcome }}
      result-s3-backend-check: ${{ steps.s3-backend-check.outcome }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Terraform Bootstrap
        id: bootstrap
        uses: appvia/appvia-cicd-workflows/.github/actions/terraform-bootstrap@main
        with:
          actions-id: ${{ secrets.actions-id }}
          actions-secret: ${{ secrets.actions-secret }}
          aws-account-id: ${{ inputs.aws-account-id }}
          aws-read-role-name: ${{ inputs.aws-read-role-name }}
          aws-region: ${{ inputs.aws-region }}
          aws-role: ${{ inputs.aws-role }}
          aws-web-identity-token-file: ${{ env.AWS_WEB_IDENTITY_TOKEN_FILE }}
          aws-write-role-name: ${{ inputs.aws-write-role-name }}
          enable-opentofu: ${{ inputs.enable-opentofu }}
          enable-private-access: ${{ inputs.enable-private-access }}
          environment: ${{ inputs.environment }}
          organization-name: ${{ inputs.organization-name }}
          terraform-dir: ${{ inputs.terraform-dir }}
          terraform-init-extra-args: ${{ inputs.terraform-init-extra-args }}
          terraform-state-key: ${{ inputs.terraform-state-key }}
          terraform-version: ${{ inputs.terraform-version }}
          use-env-as-suffix: ${{ inputs.use-env-as-suffix }}
          working-directory: ${{ inputs.working-directory }}
      - name: Terraform Validate
        id: validate
        run: ${{ env.TOOL_NAME }} -chdir=${{ inputs.terraform-dir }} validate -no-color
      - name: Terraform S3 Backend Check
        id: s3-backend-check
        run: |
          if grep -E '^[^#]*backend\s+"s3"' terraform.tf; then
            echo "Terraform configuration references an S3 backend."
          else
            echo "Terraform configuration does not reference an S3 backend."
            exit 1
          fi
      - name: Set terraform-values-file variable
        run: |
          if [ -n "${{ inputs.terraform-values-file }}" ]; then
            echo "TF_VAR_FILE=${{ inputs.terraform-values-file }}" >> "$GITHUB_ENV" 
          else
            echo "TF_VAR_FILE=values/${{ inputs.environment }}.tfvars" >> "$GITHUB_ENV" 
          fi
      - name: Check for drift and set status
        id: check-drift
        run: |
          if grep -q 'No changes' <(terraform -chdir=${{ inputs.terraform-dir }} plan -var-file="$TF_VAR_FILE" -no-color -input=false -out=tfplan -lock-timeout=${{ inputs.terraform-lock-timeout }}); then
            echo "No drift detected."
            echo "DRIFT_STATUS=no-drift" >> "$GITHUB_OUTPUT"
          else
            echo "Drift detected!"
            echo "DRIFT_STATUS=drift" >> "$GITHUB_OUTPUT"
          fi
      - name: Send Slack notification if drift is detected
        if: steps.check-drift.outputs.DRIFT_STATUS == 'drift'
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.slack-webhook-url }}
          webhook-type: incoming-webhook
          payload: |
            {
              "username": "GitHub Actions",
              "text": "ðŸš¨ Drift Detected (${{ github.repository }})",
              "icon_emoji": ":warning:"
            }
